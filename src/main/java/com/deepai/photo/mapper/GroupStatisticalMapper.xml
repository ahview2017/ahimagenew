<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.deepai.photo.mapper.GroupStatisticalMapper">
	<select id="showAllGroupStatistical" resultType="com.deepai.photo.bean.CpGroupStatistical">
		select * from (
		SELECT c.AUTHOR ,COUNT(*) as sendCount ,SUM(c.PICTURE_COUNT) as
		pictureCount from cp_pic_group c where
		c.SOURCE_ID=0 and
		c.DELETE_FLAG=0 and c.SITE_ID=1 GROUP BY c.AUTHOR )e
		LEFT JOIN
		(
		select
		AUTHOR, COUNT(*) as throughCount,SUM(PICTURE_COUNT) as
		throughPictureCount from
		cp_pic_group where GROUP_STATUS=4
		and
		SOURCE_ID=0 and DELETE_FLAG=0 and SITE_ID=1 and GROUP_STATUS=4 GROUP
		BY AUTHOR
		)d on e.AUTHOR=d.AUTHOR
	</select>
	
	<select id="groupStatisticalForCategory" resultType="com.deepai.photo.bean.CpGroupStatistical">
		SELECT
					a.CATEGORY_ID AS categary,
					b.CATEGORY_NAME AS categaryName,
					COUNT(1) AS sendCount,
					SUM(c.PICTURE_COUNT) AS pictureCount,
					sum(CASE  WHEN c.GROUP_STATUS = 4 THEN 1 ELSE 0 END) AS throughCount,
					sum(CASE c.PICTURE_COUNT WHEN c.GROUP_STATUS = 4 THEN 1 ELSE 0 END) AS throughPictureCount,
					SUM(c.QBSTATUS) AS signNewspaperNum,
					SUM(c.downloadNum) AS downloadNum
				FROM
					(select e.ID ,d.downloadNum,PICTURE_COUNT,GROUP_STATUS,QBSTATUS,DELETE_FLAG,SOURCE_ID,SITE_ID,CREATE_TIME from cp_pic_group e left join (SELECT PICTURE_GROUP_ID ,count(1)  
AS downloadNum FROM cp_picture_downloadrecord GROUP BY PICTURE_GROUP_ID) d on e.ID = d.PICTURE_GROUP_ID where  1=1 
					<if test="startTime != null and endTime != null"> 
						and e.CREATE_TIME BETWEEN #{startTime} and #{endTime}  			
					</if>
					) c,
					cp_pic_group_category a,
					cp_category b
				WHERE
					c.SOURCE_ID = 0
				AND c.DELETE_FLAG = 0
				AND c.SITE_ID = 1
				AND a.CATEGORY_ID = b.ID
				AND a.GROUP_ID = c.ID 
				<if test="categaryName!=null">
					and  b.CATEGORY_NAME  LIKE CONCAT ('%', #{categaryName}, '%')
				</if>
				GROUP BY
					a.CATEGORY_ID
				<if test='orderType!=null and orderType=="1"'>
					order by sendCount desc
				</if>
				<if test='orderType!=null and orderType=="2"'>
					order by throughCount desc
				</if>
				<if test='orderType!=null and orderType=="3"'>
					order by signNewspaperNum desc
				</if>
	</select>
	
	<select id="groupStatisticalForAuthor" resultType="com.deepai.photo.bean.CpGroupStatistical">
		SELECT
			c.AUTHOR,
			c.AUTHOR_ID,
			c.CREATOR AS creator,
			c.CREATE_TIME,
			COUNT(*) AS sendCount,
			SUM(c.QBSTATUS) AS signNewspaperNum,
			SUM(c.PICTURE_COUNT) AS pictureCount,
			sum(CASE  WHEN c.GROUP_STATUS = 4 THEN 1 ELSE 0 END) AS throughCount,
			sum(CASE c.PICTURE_COUNT WHEN c.GROUP_STATUS = 4 THEN 1 ELSE 0 END) AS throughPictureCount,
			SUM(c.downloadNum) AS downloadNum
		FROM
			(select e.ID ,d.downloadNum,PICTURE_COUNT,GROUP_STATUS,QBSTATUS,DELETE_FLAG,SOURCE_ID,SITE_ID,CREATE_TIME,AUTHOR,AUTHOR_ID,CREATOR from cp_pic_group e left join (SELECT PICTURE_GROUP_ID ,count(1)  
AS downloadNum FROM cp_picture_downloadrecord GROUP BY PICTURE_GROUP_ID) d on e.ID = d.PICTURE_GROUP_ID where 1=1 
				<if test="startTime != null and endTime != null"> 
					and e.CREATE_TIME BETWEEN #{startTime} and #{endTime}  			
				</if>
 	) c
		WHERE
			c.SOURCE_ID = 0
		AND c.DELETE_FLAG = 0
		AND c.SITE_ID = 1
		<if test='author!=null'>
			and  c.AUTHOR  LIKE CONCAT ('%', #{author}, '%')
		</if>
		GROUP BY
			c.AUTHOR
				<if test='orderType==null'>
					order by sendCount desc
				</if>
				<if test='orderType!=null and orderType=="1"'>
					order by sendCount desc
				</if>
				<if test='orderType!=null and orderType=="2"'>
					order by throughCount desc
				</if>
				<if test='orderType!=null and orderType=="3"'>
					order by signNewspaperNum desc
				</if>
	</select>
	
	
	
	
	<select id="searchGroupStatistical" resultType="com.deepai.photo.bean.CpGroupStatistical" parameterType="com.deepai.photo.bean.CpGroupStatistical">
   	 select * from (
		SELECT c.AUTHOR ,COUNT(*) as sendCount ,SUM(c.PICTURE_COUNT) as
		pictureCount from cp_pic_group c where
		c.SOURCE_ID=0 and
		c.DELETE_FLAG=0 and c.SITE_ID=1 GROUP BY c.AUTHOR )e
		LEFT JOIN
		(
		select
		AUTHOR, COUNT(*) as throughCount,SUM(PICTURE_COUNT) as
		throughPictureCount from
		cp_pic_group where GROUP_STATUS=4
		and
		SOURCE_ID=0 and DELETE_FLAG=0 and SITE_ID=1 and GROUP_STATUS=4 GROUP
		BY AUTHOR
		)d on e.AUTHOR=d.AUTHOR  where e.AUTHOR like CONCAT ('%',#{author},'%')
	</select>
	<!-- <select id="searchGroupStatistical" resultType="com.deepai.photo.bean.CpGroupStatistical"
		parameterType="com.deepai.photo.bean.CpGroupStatistical">
	select * from (
		SELECT c.AUTHOR ,COUNT(*) as sendCount ,SUM(c.PICTURE_COUNT) as
		pictureCount from cp_pic_group c 
		<if test="type !=null">
		,(SELECT a.CATEGORY_ID as categary,b.CATEGORY_NAME,a.GROUP_ID  from  cp_pic_group_category  a , cp_category b WHERE a.CATEGORY_ID=b.ID 
		<if test="type !=null">
		and a.CATEGORY_ID=#{type}
		</if>
		)d 
		</if>
		where
		c.SOURCE_ID=0 
		<if test="type !=null">
		and c.ID=d.GROUP_ID 
		</if>
		and c.DELETE_FLAG=0 and c.SITE_ID=1 
		<if test="startTime!=null and endTime!=null">
		and c.CREATE_TIME BETWEEN #{startTime} and #{endTime} 
		</if>
		 GROUP BY c.AUTHOR )e
		LEFT JOIN
		(
		select
		g.AUTHOR, COUNT(*) as throughCount,SUM(g.PICTURE_COUNT) as
		throughPictureCount from
		cp_pic_group g
		<if test="type !=null">
		,(SELECT a.CATEGORY_ID as categary,b.CATEGORY_NAME,a.GROUP_ID  from  cp_pic_group_category  a , cp_category b WHERE a.CATEGORY_ID=b.ID 
		<if test="type !=null">
		and a.CATEGORY_ID=#{type}
		</if> 
		)d
		</if>
     where g.GROUP_STATUS=4
       <if test="type !=null">
      and g.ID=d.GROUP_ID
      </if>
		and
		g.SOURCE_ID=0 and g.DELETE_FLAG=0 and g.SITE_ID=1 and g.GROUP_STATUS=4 
		<if test="startTime!=null and endTime!=null">
		and CREATE_TIME BETWEEN #{startTime} and #{endTime} 
		</if>
		 GROUP
		BY AUTHOR
		)d on e.AUTHOR=d.AUTHOR where 1=1 
		<if test="author!=null">
		and e.AUTHOR=#{author} 
		</if>
	</select> -->
	<select id="GroupStatisticalForPlace" resultType="com.deepai.photo.bean.CpGroupStatistical" >
		select * from (
		SELECT SUBSTR(c.PLACE,1,3) as place,COUNT(*) as sendCount ,SUM(c.PICTURE_COUNT) as
		pictureCount from cp_pic_group c where
		c.SOURCE_ID=0 and
		c.DELETE_FLAG=0 and c.SITE_ID=1 GROUP BY    SUBSTR(c.PLACE,1,2)   )e
		LEFT JOIN
		(
		select
		SUBSTR(PLACE,1,3) as PLACE2, COUNT(*) as throughCount,SUM(PICTURE_COUNT) as
		throughPictureCount from
		cp_pic_group where GROUP_STATUS=4
		and
		SOURCE_ID=0 and DELETE_FLAG=0 and SITE_ID=1 and GROUP_STATUS=4 GROUP BY  SUBSTR(PLACE,1,2)    		)d on e.place=d.PLACE2 
		where 1=1 
		<if test="place!=null">
	   and  place LIKE CONCAT ('%', #{place}, '%')
	   </if>
	</select>
     <select id="GroupStatisticalForType" resultType="com.deepai.photo.bean.CpGroupStatistical">
select * from (	  select * from (
		SELECT 
    a.CATEGORY_ID as categary , b.CATEGORY_NAME as categaryName,  COUNT(*) as sendCount ,SUM(c.PICTURE_COUNT) as
		pictureCount from cp_pic_group c , cp_pic_group_category  a , cp_category b where
		c.SOURCE_ID=0 and  
		c.DELETE_FLAG=0 and c.SITE_ID=1  	and a.CATEGORY_ID=b.ID 
   and a.GROUP_ID=c.ID   GROUP BY a.CATEGORY_ID )e
		LEFT JOIN
		(
		select
		a.CATEGORY_ID as categary1, COUNT(*) as throughCount,SUM(PICTURE_COUNT) as
		throughPictureCount from cp_pic_group_category  a , cp_category b ,
		cp_pic_group c where GROUP_STATUS=4
		and
		c.SOURCE_ID=0 and c.DELETE_FLAG=0 and c.SITE_ID=1 and c.GROUP_STATUS=4 and a.CATEGORY_ID=b.ID and a.GROUP_ID=c.ID GROUP BY a.CATEGORY_ID
	)d on e.categary=d.categary1 )g where 1=1 
	<if test="categaryName!=null">
	and  g.categaryName LIKE CONCAT ('%', #{categaryName}, '%')
	</if>
	</select> 
	
	<select id="groupStatisticalForAnHuiCity" resultType="com.deepai.photo.bean.CpGroupStatistical" >
		select 
			e.place,
			e.sendCount,
			e.pictureCount,
			d.throughCount,
			d.throughPictureCount,
			e.signNewspaperNum,
			j.downloadNum 
		from (
				SELECT
					SUBSTR(c.PLACE, 4, 3) AS place,
					COUNT(*) AS sendCount,
					SUM(c.PICTURE_COUNT) AS pictureCount,
					SUM(c.QBSTATUS) AS signNewspaperNum
				FROM
					cp_pic_group c
				WHERE
					c.SOURCE_ID = 0
				AND c.PLACE LIKE '%安徽%'
				AND c.DELETE_FLAG = 0
				AND c.SITE_ID = 1
				<if test="startTime != null and endTime != null"> 
	  			 and  c.CREATE_TIME BETWEEN #{startTime} and #{endTime}  			
	  			</if>
				GROUP BY
					SUBSTR(c.PLACE, 4, 2)
			) e 
			
		LEFT JOIN (
			SELECT
				SUBSTR(PLACE, 4, 3) AS PLACE2,
				COUNT(*) AS throughCount,
				SUM(PICTURE_COUNT) AS throughPictureCount
			FROM
				cp_pic_group
			WHERE
				GROUP_STATUS = 4
			AND SOURCE_ID = 0
			AND DELETE_FLAG = 0
			AND SITE_ID = 1
			AND GROUP_STATUS = 4
			AND PLACE LIKE '%安徽%'
			GROUP BY
				SUBSTR(PLACE, 4, 2)
		) d ON e.place = d.PLACE2
		LEFT JOIN (
			SELECT
				SUBSTR(PLACE, 4, 3) AS PLACE3,
				count(*) AS downloadNum
			FROM
				cp_picture_downloadrecord i
			LEFT JOIN cp_pic_group k ON k.ID = i.PICTURE_GROUP_ID
			GROUP BY
				SUBSTR(PLACE, 4, 2)
		) j ON e.place = j.PLACE3
		where 1=1 and place !=''
		<if test="place!=null">
	   		and place LIKE CONCAT ('%', #{place}, '%')
	   </if>
		<if test='orderType!=null and orderType=="1"'>
	   		order by e.sendCount desc
	    </if>
	    <if test='orderType!=null and orderType=="2"'>
	   		order by d.throughCount desc
	    </if>
	    <if test='orderType!=null and orderType=="3"'>
	   		order by e.signNewspaperNum desc
	    </if>
	</select>
	
	
	<select id="groupStatisticalForWebSiteShowColumn" resultType="com.deepai.photo.bean.CpGroupStatistical" >
		select j.NAME as categaryName,k.throughCount,k.throughPictureCount from (
		SELECT
			id,
			NAME 
		FROM
			cp_column
		WHERE
			pid = 0
		AND langType = 0
		UNION
			SELECT
				id,
				NAME
			FROM
				cp_column
			WHERE
				pid IN (
					SELECT
						id
					FROM
						cp_column
					WHERE
						pid = 0
					AND langType = 0
				)
			UNION
				SELECT
					id,
					NAME
				FROM
					cp_column a
				WHERE
					a.pid IN (
						SELECT
							d.id
						FROM
							(
								SELECT
									b.id
								FROM
									cp_column b
								WHERE
									b.pid IN (
										SELECT
											c.id
										FROM
											cp_column c
										WHERE
											c.pid = 0
										AND c.langType = 0
									)
							) d
				
					) ) j 
		LEFT JOIN (SELECT
			b.CATEGORY_ID,
			COUNT(*) AS throughCount,
			SUM(PICTURE_COUNT) AS throughPictureCount
		FROM
			cp_pic_group a  LEFT JOIN cp_pic_group_category b on a.ID = b.GROUP_ID
		WHERE
			a.GROUP_STATUS = 4
		AND a.SOURCE_ID = 0
		AND a.DELETE_FLAG = 0
		AND a.SITE_ID = 1
		and b.TYPE = 1
		<if test="startTime != null and endTime != null"> 
			 and  a.CREATE_TIME BETWEEN #{startTime} and #{endTime}  			
		</if>
		GROUP BY b.CATEGORY_ID) k on j.id = k.CATEGORY_ID 
		where 1=1 
		<if test="categaryName!=null">
	   		and NAME LIKE CONCAT ('%', #{categaryName}, '%')
	   </if>
		<if test='orderType!=null and orderType=="1"'>
	   		order by k.throughCount desc
	    </if>
	</select>
	<select id="groupStatisticalForPicDownload" resultType="com.deepai.photo.bean.CpGroupStatistical">
			SELECT 
				d.TURE_NAME as author,
				sum(c.downloadNum) as downloadNum
			FROM
				(
					SELECT
						a.ID,
						a.CREATE_TIME,
						a.AUTHOR_ID,
						b.downloadNum
					FROM
						cp_pic_group a
					LEFT JOIN (
						SELECT
							i.PICTURE_GROUP_ID,
							count(*) AS downloadNum
						FROM
							cp_picture_downloadrecord i
						GROUP BY
							i.PICTURE_GROUP_ID
					) b ON a.ID = b.PICTURE_GROUP_ID 
					where 1=1 
					<if test="startTime != null and endTime != null"> 
						 and  a.CREATE_TIME BETWEEN #{startTime} and #{endTime}  			
					</if>
				) c
			LEFT JOIN cp_user d ON c.AUTHOR_ID = d.ID
			WHERE
				d.TURE_NAME != ''
			<if test="author!=null">
		   		and d.TURE_NAME LIKE CONCAT ('%', #{author}, '%')
		   </if> 
			GROUP BY
				c.AUTHOR_ID
			ORDER BY downloadNum desc
	</select>
	
	<select id="groupStatisticalForEditor" resultType="com.deepai.photo.bean.CpGroupStatistical">
			SELECT
				l.TURE_NAME as author,
				m.firstSignNum,
				m.secondSignNum,
				m.thirdSignNum,
				m.signNewspaperNum
			FROM
				(
					SELECT
						c.USER_NAME,c.TURE_NAME
					FROM
						cp_user c
					LEFT JOIN cp_user_role d ON c.ID = d.USER_ID
					WHERE
						d.ROLE_ID = 2
				) l
			LEFT JOIN (
				SELECT
					e.OPERATE_USERNAME,
					sum(
						CASE
						WHEN e.FLOW_TYPE = 1 THEN
							1
						ELSE
							0
						END
					) AS firstSignNum,
					sum(
						CASE
						WHEN e.FLOW_TYPE = 2 THEN
							1
						ELSE
							0
						END
					) AS secondSignNum,
					sum(
						CASE
						WHEN e.FLOW_TYPE = 3 THEN
							1
						ELSE
							0
						END
					) AS thirdSignNum,
					sum(
						CASE
						WHEN e.FLOW_TYPE = 19 THEN
							1
						ELSE
							0
						END
					) AS signNewspaperNum
				FROM
					cp_pic_group a
				LEFT JOIN cp_pic_group_process e ON a.ID = e.PICGROUP_ID
				where 1=1 
				<if test="startTime != null and endTime != null"> 
					 and  a.CREATE_TIME BETWEEN #{startTime} and #{endTime}  			
				</if> 
				GROUP BY
					OPERATE_USERNAME
			) m ON l.USER_NAME = m.OPERATE_USERNAME
			where 1=1 
				<if test="author!=null">
						and l.USER_NAME LIKE CONCAT ('%', #{author}, '%')
				 </if>
				<if test='orderType!=null and orderType=="1"'>
					order by m.firstSignNum desc
				</if>
				<if test='orderType!=null and orderType=="2"'>
					order by m.secondSignNum desc
				</if>
				<if test='orderType!=null and orderType=="3"'>
					order by m.thirdSignNum desc
				</if> 
				<if test='orderType!=null and orderType=="4"'>
					order by m.signNewsPaperNum desc
				</if> 
	</select>
	
	
	<select id="groupStatisticalForUser" resultType="com.deepai.photo.bean.CpGroupStatistical">
			SELECT
				c.USER_NAME as author,
				c.ROLE_NAME as roleName,
				COUNT(*) AS sendCount,
				SUM(c.QBSTATUS) AS signNewspaperNum,
				SUM(c.PICTURE_COUNT) AS pictureCount,
				sum(
					CASE
					WHEN c.GROUP_STATUS = 4 THEN
						1
					ELSE
						0
					END
				) AS throughCount,
				sum(
					CASE c.PICTURE_COUNT
					WHEN c.GROUP_STATUS = 4 THEN
						1
					ELSE
						0
					END
				) AS throughPictureCount,
				SUM(c.downloadNum) AS downloadNum
			FROM
				(
					SELECT
						e.ID,
						f.USER_NAME,
						f.ROLE_NAME,
						d.downloadNum,
						PICTURE_COUNT,
						GROUP_STATUS,
						QBSTATUS,
						DELETE_FLAG,
						e.SOURCE_ID,
						e.SITE_ID,
						e.CREATE_TIME,
						e.AUTHOR,
						e.AUTHOR_ID,
						e.CREATOR
					FROM
						cp_pic_group e 
					LEFT JOIN (select d.ID,d.USER_NAME,group_concat(d.ROLE_NAME) as ROLE_NAME from (
			select a.ID,a.USER_NAME,c.ROLE_NAME from cp_user a LEFT JOIN cp_user_role b on a.ID = b.USER_ID  left join cp_role c on b.ROLE_ID = c.ID
			) d group by d.USER_NAME) f 
					on e.AUTHOR_ID = f.ID  
					LEFT JOIN (
						SELECT
							PICTURE_GROUP_ID,
							count(1) AS downloadNum
						FROM
							cp_picture_downloadrecord
						GROUP BY
							PICTURE_GROUP_ID
					) d ON e.ID = d.PICTURE_GROUP_ID
					where 1= 1 
					<if test="startTime != null and endTime != null"> 
						 and  e.CREATE_TIME BETWEEN #{startTime} and #{endTime}  			
					</if>
				) c
			WHERE
				c.SOURCE_ID = 0
			AND c.DELETE_FLAG = 0
			AND c.SITE_ID = 1
			AND c.USER_NAME!=''
			<if test="roleName!=null">
					AND c.ROLE_NAME LIKE CONCAT ('%', #{roleName}, '%')
			 </if>
			 <if test="author!=null">
					AND c.USER_NAME LIKE CONCAT ('%', #{author}, '%')
			 </if>
			  
			GROUP BY
				c.USER_NAME
			<if test='orderType!=null and orderType=="1"'>
		   		order by sendCount desc
		    </if>
		    <if test='orderType!=null and orderType=="2"'>
		   		order by throughCount desc
		    </if>
		    <if test='orderType!=null and orderType=="3"'>
		   		order by signNewspaperNum desc
		    </if>
	</select>
	
	
	
	
</mapper>